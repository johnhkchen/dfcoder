use crate::*;
use serde::{Deserialize, Serialize};

/// Schema definitions for BAML activity categorization
/// 
/// These schemas define the structure for semantic understanding of
/// agent activities and provide the foundation for intelligent categorization.

/// Core activity schema generated by the baml_schema! macro
/// This is implemented in the main lib.rs file, but we define the traits here

/// Activity categories and subcategories
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
pub enum Activities {
    CodeGeneration(CodeGeneration),
    ProblemSolving(ProblemSolving),
    Collaboration(Collaboration),
}

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
pub enum CodeGeneration {
    Creating,
    Refactoring,
    Testing,
}

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
pub enum ProblemSolving {
    Debugging,
    Researching,
    Analyzing,
}

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
pub enum Collaboration {
    AskingForHelp,
    Explaining,
    Reviewing,
}

impl Activities {
    /// Get the string representation of the activity
    pub fn as_str(&self) -> &'static str {
        match self {
            Activities::CodeGeneration(_) => "CodeGeneration",
            Activities::ProblemSolving(_) => "ProblemSolving",
            Activities::Collaboration(_) => "Collaboration",
        }
    }
    
    /// Get the subcategory as a string
    pub fn subcategory_str(&self) -> &'static str {
        match self {
            Activities::CodeGeneration(CodeGeneration::Creating) => "Creating",
            Activities::CodeGeneration(CodeGeneration::Refactoring) => "Refactoring",
            Activities::CodeGeneration(CodeGeneration::Testing) => "Testing",
            Activities::ProblemSolving(ProblemSolving::Debugging) => "Debugging",
            Activities::ProblemSolving(ProblemSolving::Researching) => "Researching",
            Activities::ProblemSolving(ProblemSolving::Analyzing) => "Analyzing",
            Activities::Collaboration(Collaboration::AskingForHelp) => "AskingForHelp",
            Activities::Collaboration(Collaboration::Explaining) => "Explaining",
            Activities::Collaboration(Collaboration::Reviewing) => "Reviewing",
        }
    }
    
    /// Parse activity from string description
    pub fn from_description(description: &str) -> Option<Self> {
        let desc_lower = description.to_lowercase();
        
        // Code generation patterns
        if desc_lower.contains("create") || desc_lower.contains("write") || desc_lower.contains("implement") {
            return Some(Activities::CodeGeneration(CodeGeneration::Creating));
        }
        if desc_lower.contains("refactor") || desc_lower.contains("improve") || desc_lower.contains("clean up") {
            return Some(Activities::CodeGeneration(CodeGeneration::Refactoring));
        }
        if desc_lower.contains("test") || desc_lower.contains("spec") || desc_lower.contains("unit test") {
            return Some(Activities::CodeGeneration(CodeGeneration::Testing));
        }
        
        // Problem solving patterns
        if desc_lower.contains("debug") || desc_lower.contains("fix") || desc_lower.contains("error") {
            return Some(Activities::ProblemSolving(ProblemSolving::Debugging));
        }
        if desc_lower.contains("research") || desc_lower.contains("investigate") || desc_lower.contains("explore") {
            return Some(Activities::ProblemSolving(ProblemSolving::Researching));
        }
        if desc_lower.contains("analyze") || desc_lower.contains("review") || desc_lower.contains("understand") {
            return Some(Activities::ProblemSolving(ProblemSolving::Analyzing));
        }
        
        // Collaboration patterns
        if desc_lower.contains("help") || desc_lower.contains("stuck") || desc_lower.contains("guidance") {
            return Some(Activities::Collaboration(Collaboration::AskingForHelp));
        }
        if desc_lower.contains("explain") || desc_lower.contains("clarify") || desc_lower.contains("document") {
            return Some(Activities::Collaboration(Collaboration::Explaining));
        }
        if desc_lower.contains("review") || desc_lower.contains("feedback") || desc_lower.contains("critique") {
            return Some(Activities::Collaboration(Collaboration::Reviewing));
        }
        
        None
    }
    
    /// Get typical indicators for this activity type
    pub fn typical_indicators(&self) -> Vec<&'static str> {
        match self {
            Activities::CodeGeneration(CodeGeneration::Creating) => {
                vec!["new file", "implement", "create", "write", "build", "function", "class"]
            }
            Activities::CodeGeneration(CodeGeneration::Refactoring) => {
                vec!["refactor", "improve", "clean", "optimize", "restructure", "simplify"]
            }
            Activities::CodeGeneration(CodeGeneration::Testing) => {
                vec!["test", "spec", "assert", "mock", "coverage", "unit", "integration"]
            }
            Activities::ProblemSolving(ProblemSolving::Debugging) => {
                vec!["error", "bug", "fix", "debug", "issue", "problem", "exception"]
            }
            Activities::ProblemSolving(ProblemSolving::Researching) => {
                vec!["research", "investigate", "explore", "documentation", "example", "tutorial"]
            }
            Activities::ProblemSolving(ProblemSolving::Analyzing) => {
                vec!["analyze", "understand", "examine", "study", "trace", "profile"]
            }
            Activities::Collaboration(Collaboration::AskingForHelp) => {
                vec!["help", "stuck", "guidance", "advice", "unclear", "confused"]
            }
            Activities::Collaboration(Collaboration::Explaining) => {
                vec!["explain", "clarify", "document", "comment", "describe", "overview"]
            }
            Activities::Collaboration(Collaboration::Reviewing) => {
                vec!["review", "feedback", "critique", "suggestion", "improvement", "quality"]
            }
        }
    }
}

/// Schema for agent behavior patterns
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct BehaviorSchema {
    pub agent_id: String,
    pub pattern_type: BehaviorPatternType,
    pub characteristics: BehaviorCharacteristics,
    pub performance_metrics: PerformanceMetrics,
    pub collaboration_style: CollaborationStyle,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum BehaviorPatternType {
    Independent,      // Works well alone, minimal supervision
    Collaborative,    // Seeks input, works well with others
    Methodical,       // Systematic, follows processes
    Exploratory,      // Experimental, tries different approaches
    Focused,          // Single-task oriented
    Multitasking,     // Handles multiple tasks simultaneously
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct BehaviorCharacteristics {
    pub problem_solving_approach: ProblemSolvingApproach,
    pub communication_frequency: CommunicationFrequency,
    pub error_handling_style: ErrorHandlingStyle,
    pub learning_preference: LearningPreference,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum ProblemSolvingApproach {
    Systematic,       // Step-by-step, methodical
    TrialAndError,    // Experimental, iterative
    ResearchHeavy,    // Thorough investigation first
    Intuitive,        // Relies on experience and patterns
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum CommunicationFrequency {
    Minimal,          // Only when necessary
    Regular,          // Periodic updates
    Frequent,         // Constant communication
    Reactive,         // Responds when prompted
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum ErrorHandlingStyle {
    Immediate,        // Addresses errors right away
    Accumulative,     // Fixes errors in batches
    Preventive,       // Focuses on avoiding errors
    Investigative,    // Deep dives into root causes
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum LearningPreference {
    Documentation,    // Prefers reading docs
    Examples,         // Learns from code examples
    Experimentation,  // Learns by trying things
    Mentorship,       // Learns from guidance
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PerformanceMetrics {
    pub task_completion_rate: f32,
    pub average_task_duration: std::time::Duration,
    pub error_rate: f32,
    pub help_request_frequency: f32,
    pub code_quality_score: f32,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CollaborationStyle {
    pub supervision_tolerance: SupervisionTolerance,
    pub feedback_responsiveness: FeedbackResponsiveness,
    pub knowledge_sharing_tendency: KnowledgeSharingTendency,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum SupervisionTolerance {
    High,             // Welcomes supervision
    Medium,           // Accepts when needed
    Low,              // Prefers independence
    Contextual,       // Depends on the situation
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum FeedbackResponsiveness {
    Immediate,        // Acts on feedback right away
    Considered,       // Thinks about feedback first
    Selective,        // Only acts on some feedback
    Resistant,        // Slow to implement feedback
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum KnowledgeSharingTendency {
    Proactive,        // Actively shares knowledge
    Responsive,       // Shares when asked
    Minimal,          // Shares only essential info
    Comprehensive,    // Provides detailed explanations
}

/// Schema validation utilities
pub struct SchemaValidator;

impl SchemaValidator {
    /// Validate an activity classification
    pub fn validate_activity(activity: &Activities) -> Result<(), ValidationError> {
        // Basic validation - ensure the activity has valid subcategories
        match activity {
            Activities::CodeGeneration(_) |
            Activities::ProblemSolving(_) |
            Activities::Collaboration(_) => Ok(()),
        }
    }
    
    /// Validate behavior schema completeness
    pub fn validate_behavior_schema(schema: &BehaviorSchema) -> Result<(), ValidationError> {
        if schema.agent_id.is_empty() {
            return Err(ValidationError::MissingField("agent_id".to_string()));
        }
        
        if schema.performance_metrics.task_completion_rate < 0.0 || 
           schema.performance_metrics.task_completion_rate > 1.0 {
            return Err(ValidationError::InvalidValue("task_completion_rate must be between 0 and 1".to_string()));
        }
        
        Ok(())
    }
    
    /// Validate activity context
    pub fn validate_activity_context(context: &ActivityContext) -> Result<(), ValidationError> {
        if context.description.is_empty() {
            return Err(ValidationError::MissingField("description".to_string()));
        }
        
        if context.duration.as_secs() == 0 {
            return Err(ValidationError::InvalidValue("duration must be greater than 0".to_string()));
        }
        
        Ok(())
    }
}

#[derive(Debug, thiserror::Error)]
pub enum ValidationError {
    #[error("Missing required field: {0}")]
    MissingField(String),
    #[error("Invalid value: {0}")]
    InvalidValue(String),
    #[error("Schema validation failed: {0}")]
    SchemaError(String),
}

/// Schema templates for common scenarios
pub struct SchemaTemplates;

impl SchemaTemplates {
    /// Template for a coding-focused agent
    pub fn coding_focused_agent(agent_id: String) -> BehaviorSchema {
        BehaviorSchema {
            agent_id,
            pattern_type: BehaviorPatternType::Focused,
            characteristics: BehaviorCharacteristics {
                problem_solving_approach: ProblemSolvingApproach::Systematic,
                communication_frequency: CommunicationFrequency::Minimal,
                error_handling_style: ErrorHandlingStyle::Immediate,
                learning_preference: LearningPreference::Documentation,
            },
            performance_metrics: PerformanceMetrics {
                task_completion_rate: 0.85,
                average_task_duration: std::time::Duration::from_minutes(30),
                error_rate: 0.15,
                help_request_frequency: 0.1,
                code_quality_score: 0.8,
            },
            collaboration_style: CollaborationStyle {
                supervision_tolerance: SupervisionTolerance::Low,
                feedback_responsiveness: FeedbackResponsiveness::Considered,
                knowledge_sharing_tendency: KnowledgeSharingTendency::Responsive,
            },
        }
    }
    
    /// Template for a collaborative agent
    pub fn collaborative_agent(agent_id: String) -> BehaviorSchema {
        BehaviorSchema {
            agent_id,
            pattern_type: BehaviorPatternType::Collaborative,
            characteristics: BehaviorCharacteristics {
                problem_solving_approach: ProblemSolvingApproach::ResearchHeavy,
                communication_frequency: CommunicationFrequency::Frequent,
                error_handling_style: ErrorHandlingStyle::Investigative,
                learning_preference: LearningPreference::Mentorship,
            },
            performance_metrics: PerformanceMetrics {
                task_completion_rate: 0.75,
                average_task_duration: std::time::Duration::from_minutes(45),
                error_rate: 0.2,
                help_request_frequency: 0.4,
                code_quality_score: 0.85,
            },
            collaboration_style: CollaborationStyle {
                supervision_tolerance: SupervisionTolerance::High,
                feedback_responsiveness: FeedbackResponsiveness::Immediate,
                knowledge_sharing_tendency: KnowledgeSharingTendency::Proactive,
            },
        }
    }
}